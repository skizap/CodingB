================================================================================
PROJECT SPECIFICATION: CodingBuddy - AI-Powered Coding Agent for Geany
================================================================================

OVERVIEW
--------
A Lua-based intelligent coding assistant plugin for Geany that leverages multiple
AI APIs to provide comprehensive coding assistance. The plugin integrates with
various AI providers through a unified interface, with primary support for
OpenRouter.ai's multi-model platform.

CORE ARCHITECTURE
-----------------
Location: ~/.config/geany/plugins/geanylua/codingbuddy/

Main Components:
- main.lua              # Main plugin entry point & API manager
- ai_connector.lua      # Multi-AI API interface handler
- analyzer.lua          # Code analysis engine
- generator.lua         # AI-powered code generation
- refactoring.lua       # Intelligent refactoring assistant
- learning.lua          # Pattern learning system
- dialogs.lua           # Custom UI components
- config.lua            # API keys & model configuration

Event Scripts:
- events/opened.lua     # Learn from opened files
- events/saved.lua      # Analyze on save
- events/activated.lua  # Context switching

MULTI-AI API SUPPORT
--------------------

Primary Provider: OpenRouter.ai
- Unified access to 400+ models from 60+ providers
- Single API key for all models
- Fallback support when providers go down
- Cost optimization through model selection

Secondary API Support:
- OpenAI API (GPT-4, GPT-3.5-turbo)
- Anthropic Claude API
- Google Gemini API
- Local AI models (Ollama integration)
- Custom API endpoints

API Configuration:
- User-configurable model selection per task type
- Automatic fallback chain when primary fails
- Cost tracking and usage monitoring
- Rate limiting and quota management

INTELLIGENT FEATURES
--------------------

1. Context-Aware Code Analysis
   - Real-time code quality analysis via AI
   - Multi-language error detection and suggestions
   - Code smell detection with AI-powered recommendations
   - Project-wide dependency analysis

2. AI-Powered Code Generation Hub
   - Function/class template generation
   - Documentation generation with multiple AI models
   - Test case generation for functions and classes
   - Boilerplate code creation adapted to your style

3. Intelligent Refactoring Assistant
   - AI-suggested variable/function renaming
   - Code extraction and method extraction recommendations
   - Dead code detection with cleanup suggestions
   - Import/dependency optimization

4. Adaptive Learning System
   - Uses multiple AI models to learn coding patterns
   - Tracks coding habits and suggests improvements
   - Builds personal coding knowledge base
   - Model comparison for best suggestions

5. Advanced AI Dialog Integration
   - Custom GTK dialogs for AI interactions
   - Interactive code review interface
   - Multi-step AI-guided refactoring wizards
   - Intelligent search with natural language queries

API INTEGRATION ARCHITECTURE
-----------------------------

ai_connector.lua Structure:

-- Multi-provider API manager
local APIManager = {
providers = {
openrouter = {
base_url = "https://openrouter.ai/api/v1",
models = {"anthropic/claude-3.5-sonnet", "openai/gpt-4", "meta-llama/llama-3.1-405b"},
primary = true
},
openai = {
base_url = "https://api.openai.com/v1",
models = {"gpt-4", "gpt-3.5-turbo"},
fallback = 1
},
anthropic = {
base_url = "https://api.anthropic.com/v1",
models = {"claude-3-opus", "claude-3-sonnet"},
fallback = 2
},
local = {
base_url = "http://localhost:11434/v1",
models = {"codellama", "deepseek-coder"},
fallback = 3
}
}
}



TASK-SPECIFIC MODEL SELECTION
-----------------------------
- Code Analysis: Fast models (GPT-3.5-turbo, Claude-3-haiku)
- Code Generation: Powerful models (GPT-4, Claude-3.5-sonnet)
- Documentation: Balanced models (GPT-4o, Gemini-pro)
- Refactoring: Specialized coding models (CodeLlama, DeepSeek-Coder)
- Learning: Cost-effective models with good reasoning

CONFIGURATION SYSTEM
---------------------

config.lua manages:
- API keys for all providers
- Model preferences per task type
- Fallback chains and retry logic
- Cost limits and usage tracking
- Custom prompt templates
- Provider-specific settings

User Configuration File:
~/.config/geany/plugins/geanylua/codingbuddy/config.json

SAFETY & PRIVACY FEATURES
--------------------------
- Local caching to minimize API calls
- Sensitive data filtering before sending to APIs
- User consent for each AI interaction
- Offline mode with local models only
- API key encryption and secure storage
- Usage logging and audit trails

PLUGIN FILE STRUCTURE
----------------------
codingbuddy/
├── main.lua                 # Plugin entry point
├── ai_connector.lua         # Multi-AI API interface
├── analyzer.lua             # Code analysis engine
├── generator.lua            # AI code generation
├── refactoring.lua          # Refactoring assistant
├── learning.lua             # Pattern learning
├── dialogs.lua              # UI components
├── config.lua               # Configuration manager
├── utils.lua                # Utility functions
├── prompts/                 # AI prompt templates
│   ├── analysis.txt
│   ├── generation.txt
│   ├── documentation.txt
│   └── refactoring.txt
├── cache/                   # Local response cache
└── logs/                    # Usage and error logs

IMPLEMENTATION PHASES
---------------------

Phase 1: Basic AI Integration
- OpenRouter.ai API connection
- Simple code analysis with AI
- Basic configuration system

Phase 2: Multi-Provider Support
- Add OpenAI, Anthropic, local model support
- Implement fallback system
- Add cost tracking

Phase 3: Advanced Features
- Intelligent code generation
- Learning system implementation
- Advanced UI dialogs

Phase 4: Optimization
- Performance improvements
- Advanced caching
- Custom model fine-tuning

DEVELOPMENT REQUIREMENTS
------------------------
- Geany with GeanyLua plugin installed
- Lua 5.1+ with lua-socket for HTTP requests
- API keys for chosen providers
- GTK development libraries (for custom dialogs)

OPENROUTER.AI INTEGRATION BENEFITS
-----------------------------------
- Access to 400+ models through single API[1]
- Automatic fallback when providers fail[1]
- Cost optimization through model selection[1]
- Edge computing with ~25ms latency[1]
- No need for multiple API keys and integrations[1]
- Real-time model availability and pricing[1]

This specification provides a comprehensive framework for building an advanced
AI-powered coding assistant that leverages multiple AI providers while maintaining
simplicity through OpenRouter.ai's unified interface.

